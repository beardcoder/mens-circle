---
import 'leaflet/dist/leaflet.css'

interface Props {
  longitude: number
  latitude: number
  place: string
  address: string
  city: string
  zip: string
}

const { latitude, longitude, place, address, city, zip } = Astro.props
---

<section class="relative aspect-square min-h-80 md:aspect-[16/4]">
  <event-map
    class="absolute inset-0"
    data-longitude={longitude}
    data-latitude={latitude}
    data-popup={`${place} - ${address}, ${zip} ${city}`}
  >
  </event-map>
</section>
<script>
  import type { LatLngExpression } from 'leaflet'
  class EventMap extends HTMLElement {
    async connectedCallback() {
      const { map, icon, marker, tileLayer } = await import('leaflet')
      const latLong: LatLngExpression = [parseFloat(this.dataset.latitude!), parseFloat(this.dataset.longitude!)]
      const myMap = map(this, {
        zoomControl: false,
        scrollWheelZoom: false,
        closePopupOnClick: false,
        center: latLong,
      }).setView(latLong, 100)

      const myIcon = icon({
        iconUrl:
          'data:image/svg+xml,%3Csvg xmlns="http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg" width="24" height="24" viewBox="0 0 24 24"%3E%3Ccircle cx="12" cy="9.5" r="1.5" fill="%23008478"%2F%3E%3Cpath fill="%23008478" d="M12 2a8 8 0 0 0-8 7.92c0 5.48 7.05 11.58 7.35 11.84a1 1 0 0 0 1.3 0C13 21.5 20 15.4 20 9.92A8 8 0 0 0 12 2m0 11a3.5 3.5 0 1 1 3.5-3.5A3.5 3.5 0 0 1 12 13"%2F%3E%3C%2Fsvg%3E',
        iconSize: [40, 40],
        iconAnchor: [20, 20],
        popupAnchor: [0, -20],
      })

      const myMarker = marker(latLong, {
        icon: myIcon,
        interactive: false,
      }).addTo(myMap)

      myMarker
        .bindPopup(this.dataset.popup!, {
          closeButton: false,
          closeOnEscapeKey: false,
          closeOnClick: false,
        })
        .openPopup()

      tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.svg', {
        attribution: '©OpenStreetMap, ©CartoDB',
      }).addTo(myMap)
    }
  }
  customElements.define('event-map', EventMap)
</script>
